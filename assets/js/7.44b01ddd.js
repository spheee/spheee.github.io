(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{202:function(s,t,e){s.exports=e.p+"assets/img/1.244a0c32.jpeg"},228:function(s,t,e){"use strict";e.r(t);var r=e(0),c=Object(r.a)({},(function(){var s=this,t=s.$createElement,r=s._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[r("h1",{attrs:{id:"defer-与-async"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#defer-与-async","aria-hidden":"true"}},[s._v("#")]),s._v(" defer 与 async")]),s._v(" "),r("blockquote",[r("p",[s._v("前言\n先来试个一句话解释仨，当浏览器碰到 script 脚本的时候：")])]),s._v(" "),r("p",[r("code",[s._v('<script src="script.js"><\/script>')])]),s._v(" "),r("p",[s._v("没有 defer 或 async，浏览器会立即加载并执行指定的脚本，“立即”指的是在渲染该 script 标签之下的文档元素之前，也就是说不等待后续载入的文档元素，读到就加载并执行。")]),s._v(" "),r("p",[r("code",[s._v('<script async src="script.js"><\/script>')])]),s._v(" "),r("p",[s._v("有 async，加载和渲染后续文档元素的过程将和 script.js 的加载与执行并行进行（异步）。")]),s._v(" "),r("p",[r("code",[s._v('<script defer src="myscript.js"><\/script>')])]),s._v(" "),r("p",[s._v("有 defer，加载后续文档元素的过程将和 script.js 的加载并行进行（异步），但是 script.js 的执行要在所有元素解析完成之后，DOMContentLoaded 事件触发之前完成。")]),s._v(" "),r("p",[s._v("然后从实用角度来说呢，首先把所有脚本都丢到 "),r("code",[s._v("</body>")]),s._v("之前是最佳实践，因为对于旧浏览器来说这是唯一的优化选择，此法可保证非脚本的其他一切元素能够以最快的速度得到加载和解析。")]),s._v(" "),r("p",[r("img",{attrs:{src:e(202),alt:"盒模型"}}),r("br"),s._v("\n蓝色线代表网络读取，红色线代表执行时间，这俩都是针对脚本的；绿色线代表 HTML 解析。")]),s._v(" "),r("p",[s._v("此图告诉我们以下几个要点：")]),s._v(" "),r("ol",[r("li",[s._v("defer 和 async 在网络读取（下载）这块儿是一样的，都是异步的（相较于 HTML 解析）")]),s._v(" "),r("li",[s._v("它俩的差别在于脚本下载完之后何时执行，显然 defer 是最接近我们对于应用脚本加载和执行的要求的")]),s._v(" "),r("li",[s._v("关于 defer，此图未尽之处在于它是按照加载顺序执行脚本的，这一点要善加利用")]),s._v(" "),r("li",[s._v("async 则是一个乱序执行的主，反正对它来说脚本的加载和执行是紧紧挨着的，所以不管你声明的顺序如何，只要它加载完了就会立刻执行")]),s._v(" "),r("li",[s._v("仔细想想，async 对于应用脚本的用处不大，因为它完全不考虑依赖（哪怕是最低级的顺序执行），不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的，最典型的例子：Google Analytics")])])])}),[],!1,null,null,null);t.default=c.exports}}]);